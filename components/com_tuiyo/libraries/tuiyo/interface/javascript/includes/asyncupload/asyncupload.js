(function ($) {    $.fn.makeAsyncUploader = function (options) {        return this.each(function () {            var id = $(this).attr("id");                        var container = $("<span class='asyncUploader'/>");            container.append($("<div class='ProgressBar'> <div>&nbsp;</div> </div>"));            container.append($("<span id='" + id + "_completedMessage'/>"));            container.append($("<span id='" + id + "_uploading'>" + $.gt.gettext('Uploading...') + " <input type='button' value='" + $.gt.gettext('Cancel') + "'/></span>"));            container.append($("<span id='" + id + "_swf'/>"));            container.append($("<input type='hidden' name='" + id + "_filename'/>"));            container.append($("<input type='hidden' name='" + id + "_guid'/>"));            $(this).before(container).remove();            $("div.ProgressBar", container).hide();            $("span[id$=_uploading]", container).hide();            var swfu;            var width = 109,                height = 22;            if (options) {                width = options.width || width;                height = options.height || height;            }            var defaults = {                flash_url: "swfupload.swf",                upload_url: "/Home/AsyncUpload",                file_size_limit: "3 MB",                file_types: "*.*",                file_types_description: "All Files",                debug: false,                button_image_url: "blankButton.png",                button_width: width,                button_height: height,                button_placeholder_id: id + "_swf",                button_text: "<font face='Arial' size='13pt'>" + $.gt.gettext('Choose file') + "</span>",                button_text_left_padding: (width - 70) / 2,                button_text_top_padding: 0,                file_queued_handler: function (file) {                    swfu.startUpload();                },                file_queue_error_handler: function (file, code, msg) {                    alert($.gt.gettext("Sorry, your file wasn't uploaded: " + msg));                },                upload_error_handler: function (file, code, msg) {                    alert($.gt.gettext("Sorry, your file wasn't uploaded: " + msg));                },                upload_start_handler: function () {                    swfu.setButtonDimensions(0, height);                    $("input[name$=_filename]", container).val("");                    $("input[name$=_guid]", container).val("");                    $("div.ProgressBar div", container).css("width", "0px");                    $("div.ProgressBar", container).show();                    $("span[id$=_uploading]", container).show();                    $("span[id$=_completedMessage]", container).html("").hide();                    if (options.disableDuringUpload) $(options.disableDuringUpload).attr("disabled", "disabled");                },                upload_success_handler: function (file, response) {                    $("input[name$=_filename]", container).val(file.name);                    $("input[name$=_guid]", container).val(response);                    $("span[id$=_completedMessage]", container).html($.sprintf($.gt.gettext("Uploaded %(filename)s (%(size)s KB)"), {                        "filename": file.name,                        "size": Math.round(file.size / 1024)                    }));                    $("input[name$=_guid]", container).trigger("afterUpload", response);                },                upload_complete_handler: function () {                    var clearup = function () {                        $("div.ProgressBar", container).hide();                        $("span[id$=_completedMessage]", container).show();                        $("span[id$=_uploading]", container).hide();                        swfu.setButtonDimensions(width, height);                    };                    if ($("input[name$=_filename]", container).val() != "") $("div.ProgressBar div", container).animate({                        width: "100%"                    }, {                        duration: "fast",                        queue: false,                        complete: clearup                    });                    else clearup();                    if (options.disableDuringUpload) $(options.disableDuringUpload).removeAttr("disabled");                },                upload_progress_handler: function (file, bytes, total) {                    var percent = 100 * bytes / total;                    $("div.ProgressBar div", container).animate({                        width: percent + "%"                    }, {                        duration: 500,                        queue: false                    });                }            };            swfu = new SWFUpload($.extend(defaults, options || {}));            $("span[id$=_uploading] input[type='button']", container).click(function () {                swfu.cancelUpload(null, false);            });            if (options.existingFilename || "" != "") {                $("span[id$=_completedMessage]", container).html($.sprintf($.gt.gettext("Uploaded %(filename)s (%(size)s KB)"), {                    "filename": options.existingFilename,                    "size": options.existingFileSize ? Math.round(options.existingFileSize / 1024) : "?"                })).show();                $("input[name$=_filename]", container).val(options.existingFilename);            }            if (options.existingGuid || "" != "") $("input[name$=_guid]", container).val(options.existingGuid);        });    }})(jQuery);